if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
suppressPackageStartupMessages({sapply(pkg, require, character.only = TRUE)})
}
list.of.pkgs = c("tidyverse", "magrittr", "rvest", "httr", "jsonlite", "DBI", "config", "vaultr", "dbplyr", "rmarkdown", "knitr")
ipk(list.of.pkgs)
irisDT = as.data.table(iris)
tables() # show loaded tables
setorder(irisDT, Sepal.Length, Sepal.Width)
irisDT
setorder(irisDT, -Species, Sepal.Width)
irisDT
irisDT[3:4]
irisDT[3:4,] #row 3 and 4
irisDT[-(1:5)] #delete rows 1:5
irisDT[!(1:5)] # using false to delete as well
irisDT[.N] # last row
irisDT[1:(.N-10)] # all but the last 10 rows
irisDT[Species == "virginica"] # based on conditions fulfilled in columns
irisDT[Species %like% "^v"] # using %like% helper function
irisDT[Petal.Width %between% c(0.3, 0.4)] # values in an interval
irisDT[, Species] # returns a vector
irisDT[, "Species"] # returns a dataframe/data.table
irisDT[, -c("Species")]
irisDT[, !c("Species")]
irisDT[, list(Species, LS = Sepal.Length)] # select and rename
# .() is an alias for list
irisDT[, .(Species, SL = Sepal.Length)]
irisDT[Species == "virginica" & Sepal.Length > 7 & Sepal.Width < 3, !c("Species")]
irisDT[Species == "virginica" &
Sepal.Length > 7 &Sepal.Width < 3,.(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)]
irisDT[, maxLength := max(Sepal.Length, Petal.Length)][,
minWidth := min(Sepal.Length, Petal.Width)]
irisDT
irisDT[, c("maxLength", "minWidth") :=
list(
max(Sepal.Length, Petal.Length),
min(Sepal.Width, Petal.Width)
)]
irisDT
irisDT[, `:=` (
maxLength = max(Sepal.Length, Petal.Length),
minWidth = min(Sepal.Width, Petal.Width)
)]
irisDT
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))]
newIris <- irisDT[, .(Sepal.Area = Sepal.Width * Sepal.Length,
Petal.Area = Petal.Width * Petal.Length)]
newIris[, Area.Ratio := Petal.Area / Sepal.Area]
newIris[1:5]
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))][1:5]
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))]
home = ifelse(Sys.info()[["sysname"]] == "Linux", Sys.getenv("HOME"), Sys.getenv("USERPROFILE"))
home = gsub("\\\\", "/",home)
dir = file.path(home, "Distill websites")
ipk = function(pkg){
new.pkg = list.of.pkgs[!(list.of.pkgs %in% .packages(all.available = TRUE))]
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
suppressPackageStartupMessages({sapply(pkg, require, character.only = TRUE)})
}
list.of.pkgs = c("tidyverse", "magrittr", "rvest", "httr", "jsonlite", "DBI", "config", "vaultr", "dbplyr", "rmarkdown", "knitr")
ipk(list.of.pkgs)
irisDT = as.data.table(iris)
tables() # show loaded tables
setorder(irisDT, Sepal.Length, Sepal.Width)
irisDT
setorder(irisDT, -Species, Sepal.Width)
irisDT
irisDT[3:4]
irisDT[3:4,] #row 3 and 4
irisDT[-(1:5)] #delete rows 1:5
irisDT[!(1:5)] # using false to delete as well
irisDT[.N] # last row
irisDT[1:(.N-10)] # all but the last 10 rows
irisDT[Species == "virginica"] # based on conditions fulfilled in columns
irisDT[Species %like% "^v"] # using %like% helper function
irisDT[Petal.Width %between% c(0.3, 0.4)] # values in an interval
irisDT[, Species] # returns a vector
irisDT[, "Species"] # returns a dataframe/data.table
irisDT[, -c("Species")]
irisDT[, !c("Species")]
irisDT[, list(Species, LS = Sepal.Length)] # select and rename
# .() is an alias for list
irisDT[, .(Species, SL = Sepal.Length)]
irisDT[Species == "virginica" & Sepal.Length > 7 & Sepal.Width < 3, !c("Species")]
irisDT[Species == "virginica" &
Sepal.Length > 7 &Sepal.Width < 3,.(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)]
irisDT[, maxLength := max(Sepal.Length, Petal.Length)][,
minWidth := min(Sepal.Length, Petal.Width)]
irisDT
irisDT[, c("maxLength", "minWidth") :=
list(
max(Sepal.Length, Petal.Length),
min(Sepal.Width, Petal.Width)
)]
irisDT
irisDT[, `:=` (
maxLength = max(Sepal.Length, Petal.Length),
minWidth = min(Sepal.Width, Petal.Width)
)]
irisDT
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))]
newIris <- irisDT[, .(Sepal.Area = Sepal.Width * Sepal.Length,
Petal.Area = Petal.Width * Petal.Length)]
newIris[, Area.Ratio := Petal.Area / Sepal.Area]
newIris[1:5]
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))][1:5]
newIris <- irisDT[, .(Sepal.Area = Sepal.Width * Sepal.Length,
Petal.Area = Petal.Width * Petal.Length)]
newIris[, Area.Ratio := Petal.Area / Sepal.Area]
newIris[1:5]
irisDT[, `:=` (
maxLength = max(Sepal.Length, Petal.Length),
minWidth = min(Sepal.Width, Petal.Width)
)]
irisDT[1:5]
tables()[1:3]# show loaded tables
tables()[2]# show loaded tables
irisDT = as.data.table(iris)
home = ifelse(Sys.info()[["sysname"]] == "Linux", Sys.getenv("HOME"), Sys.getenv("USERPROFILE"))
home = gsub("\\\\", "/",home)
dir = file.path(home, "Distill websites")
ipk = function(pkg){
new.pkg = list.of.pkgs[!(list.of.pkgs %in% .packages(all.available = TRUE))]
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
suppressPackageStartupMessages({sapply(pkg, require, character.only = TRUE)})
}
list.of.pkgs = c("tidyverse", "magrittr", "rvest", "httr", "jsonlite", "DBI", "config", "vaultr", "dbplyr", "rmarkdown", "knitr")
ipk(list.of.pkgs)
irisDT = as.data.table(iris)
#tables()# show loaded tables
setorder(irisDT, Sepal.Length, Sepal.Width)
irisDT[1:5]
setorder(irisDT, -Species, Sepal.Width)
irisDT[1:5]
irisDT[3:4]
irisDT[, maxLength := max(Sepal.Length, Petal.Length)][,
minWidth := min(Sepal.Length, Petal.Width)]
irisDT[1:5]
irisDT[, c("maxLength", "minWidth") :=
list(
max(Sepal.Length, Petal.Length),
min(Sepal.Width, Petal.Width)
)]
irisDT[1:5]
irisDT[, `:=` (
maxLength = max(Sepal.Length, Petal.Length),
minWidth = min(Sepal.Width, Petal.Width)
)]
irisDT[1:5]
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))][1:5]
newIris <- irisDT[, .(Sepal.Area = Sepal.Width * Sepal.Length,
Petal.Area = Petal.Width * Petal.Length)]
newIris[, Area.Ratio := Petal.Area / Sepal.Area]
newIris[1:5]
irisDT[, .(meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width))]
irisDT[, .(nSamples = .N, nSpecies = uniqueN(Species))
]
irisDT[Species == "versicolor",.(
meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width)
)]
irisDT[, .(meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width)), by = "Species"]
irisDT[, .(nSamples = .N, nSpecies = uniqueN(Species)), by = .(Species)]
(x <- data.table(id = c(1, 2, 4, 5, 6),
x = c(9, 12, 14, 21, 8)))
(y <- data.table(id = c(1, 3, 4, 6, 6),
y = c(8, 14, 19, 2, 4)))
y[x, on = .(id), nomatch = 0]
merge.data.table(x = x, y = y, by = "id", all = TRUE)
merge.data.table(x = x, y = y, by = "id", all.x = TRUE)
y[x, on = .(id)]
data.table::merge.data.table(x = x, y = y, by = "id", all.y = T)
x[y, on = .(id)]
x[!y, on = .(id)]
setkey(x, id)
setkey(y, "id")
haskey(x); haskey(y)
key(x); key(y)
x[y, nomatch = 0]
x[y]
y[x]
library(dplyr)
library(data.table)
data(starwars)
starwarsDT <- as.data.table(starwars)
starwarsDT[1]
starwarsDT[, .(min = min(mass, na.rm = T),
max = max(mass, na.rm = T),
nobs = .N), by = homeworld][nobs >1]
knitr::kable(head(iris[1:4,], n =3))
irisUnited <- irisDT[ , Sepal.Length.Width := paste0(Sepal.Length, "/", Sepal.Width)]
irisUnited[1:5]
irisSeparated = irisUnited[, c('Sepal.Length', 'Sepal.Width') := tstrsplit(Sepal.Length.Width, "/")]
irisSeparated[1:5]
data("relig_income")
a = as.data.table(relig_income)
a[1:5]
b = melt(a, id.vars = "religion", variable.name = "income_category", value.name = "n")
data("storms")
aa = as.data.table(storms)
aa[, date:= paste0(year, "-", month,"-", day)]
cols = sapply(irisDT, is.numeric)
cols = names(cols)[cols]
irisDT[, lapply(.SD, mean), by = Species, .SDcols = cols]
irisDT[, lapply(.SD, mean), by = Species, .SDcols = c("Petal.Length", "Petal.Width")]
irisDT[ , unlist(recursive = FALSE, lapply(.(mean = mean, sd = sd, min = min, max = max),
function(f) lapply(.SD, f))), by = Species][1:5]
data("starwars")
starwarsDT = as.data.table(starwars)
cols = sapply(starwarsDT, is.numeric)
cols = names(cols)[cols]
starwarsDT[, height:= as.numeric(height)]
starwarsDT[, unlist(recursive = F,
lapply(.(min = min, max = max, median = median, mean = mean), function(f) lapply(.SD, f))), by = .(homeworld, species), .SDcols = cols][1:5]
starwarsDT = as.data.table(starwars)
setnames(starwarsDT, toupper(names(starwarsDT)))
cols = sapply(starwarsDT, is.character)
cols = names(cols)[cols]
starwarsDT[, lapply(.SD, toupper)][1:5]
stormsDT <- as.data.table(storms)
numericCols = sapply(stormsDT, is.numeric)
numericCols = names(numericCols)[numericCols]
stormsDTNew <- na.omit(stormsDT, cols = numericCols)
characterCols <- sapply(stormsDTNew, is.character)
characterCols <- names(characterCols)[characterCols]
colsOfInterest <- c("ts_diameter", "hu_diameter")
stormsDTNew[, lapply(.SD, mean), .SDcols = colsOfInterest, by = characterCols][1:5]
# irisDT[, .SD[1L]]
# irisDT[, .SD[1L], by = Species]
irisDT[, .SD[1L], by = Species, .SDcols = c("Petal.Length", "Petal.Width")]
irisDT[order(-Sepal.Length), .SD[1:2]]
irisDT[, .SD[which.max(Sepal.Length)], by = Species, .SDcols = c("Sepal.Length","Sepal.Width")]
irisDT[, text := {
if(Sepal.Length > 4 & Sepal.Width > 4) "sepal length and width is larger than 4"
else if(Petal.Length < 2 & Petal.Width < 2) "petal length and width is smaller than 2"
else "other"
}, by = .(Species, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)][, .SD[1], by = text][1:5]
bin_iris <- function(sl, sw, pl, pw){
if(sl > 4 & sw > 4) "sepal length and width is larger than 4"
else if(pl < 2 & pw < 2) "petal length and width is smaller than 2"
else "other"
}
irisDT[, text := bin_iris(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
by = .(Species, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)][, .SD[1], by = text][1:5]
starwarsDT <- as.data.table(starwars)
starwarsDT[, if(.N >= 5) .SD[5L], by = species]
stormsDT <- as.data.table(storms)
stormsDT[, .(name, status, pressure)][order(name, pressure)][, .SD[1:min(5, .N)], by = name][1:5]
# irisDT[3:4,] #row 3 and 4
# irisDT[-(1:5)] #delete rows 1:5
# irisDT[!(1:5)] # using false to delete as well
# irisDT[.N] # last row
# irisDT[1:(.N-10)] # all but the last 10 rows
# irisDT[Species == "virginica"] # based on conditions fulfilled in columns
irisDT[Species %like% "^v"][1:5]# using %like% helper function
irisDT[Petal.Width %between% c(0.3, 0.4)][1:5# values in an interval
# irisDT[3:4,] #row 3 and 4
# irisDT[-(1:5)] #delete rows 1:5
# irisDT[!(1:5)] # using false to delete as well
# irisDT[.N] # last row
# irisDT[1:(.N-10)] # all but the last 10 rows
# irisDT[Species == "virginica"] # based on conditions fulfilled in columns
irisDT[Species %like% "^v"][1:5]# using %like% helper function
irisDT[Petal.Width %between% c(0.3, 0.4)][1:5]# values in an interval
getwd()
rename_post_dir("_posts/2020-12-04-data-munging-withdata-table")
getwd()
library(rmarkdown)
render_site()
getwd()
dir
setwd(dir)
getwd()
home = ifelse(Sys.info()[["sysname"]] == "Linux", Sys.getenv("HOME"), Sys.getenv("USERPROFILE"))
home = gsub("\\\\", "/",home)
dir = file.path(home, "Distill websites")
ipk = function(pkg){
new.pkg = list.of.pkgs[!(list.of.pkgs %in% .packages(all.available = TRUE))]
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
suppressPackageStartupMessages({sapply(pkg, require, character.only = TRUE)})
}
list.of.pkgs = c("tidyverse", "magrittr", "rvest", "httr", "jsonlite", "DBI", "config", "vaultr", "dbplyr", "rmarkdown", "knitr")
ipk(list.of.pkgs)
irisDT = as.data.table(iris)
#tables()# show loaded tables
setorder(irisDT, Sepal.Length, Sepal.Width)
irisDT[1:5]
setorder(irisDT, -Species, Sepal.Width)
irisDT[1:5]
irisDT[3:4]
irisDT[, maxLength := max(Sepal.Length, Petal.Length)][,
minWidth := min(Sepal.Length, Petal.Width)]
irisDT[1:5]
irisDT[, c("maxLength", "minWidth") :=
list(
max(Sepal.Length, Petal.Length),
min(Sepal.Width, Petal.Width)
)]
irisDT[1:5]
irisDT[, `:=` (
maxLength = max(Sepal.Length, Petal.Length),
minWidth = min(Sepal.Width, Petal.Width)
)]
irisDT[1:5]
irisDT[, .(maxLength = pmax(Sepal.Length, Petal.Length),
minWidth = pmin(Sepal.Width, Petal.Width))][1:5]
newIris <- irisDT[, .(Sepal.Area = Sepal.Width * Sepal.Length,
Petal.Area = Petal.Width * Petal.Length)]
newIris[, Area.Ratio := Petal.Area / Sepal.Area]
newIris[1:5]
irisDT[, .(meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width))]
irisDT[, .(nSamples = .N, nSpecies = uniqueN(Species))
]
irisDT[Species == "versicolor",.(
meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width)
)]
irisDT[, .(meanSepalLength = mean(Sepal.Length),
meanSepalWidth = mean(Sepal.Width),
meanPetalLength = mean(Petal.Length),
meanPetalWidth = mean(Petal.Width)), by = "Species"]
irisDT[, .(nSamples = .N, nSpecies = uniqueN(Species)), by = .(Species)]
(x <- data.table(id = c(1, 2, 4, 5, 6),
x = c(9, 12, 14, 21, 8)))
(y <- data.table(id = c(1, 3, 4, 6, 6),
y = c(8, 14, 19, 2, 4)))
y[x, on = .(id), nomatch = 0]
merge.data.table(x = x, y = y, by = "id", all = TRUE)
merge.data.table(x = x, y = y, by = "id", all.x = TRUE)
y[x, on = .(id)]
data.table::merge.data.table(x = x, y = y, by = "id", all.y = T)
x[y, on = .(id)]
x[!y, on = .(id)]
setkey(x, id)
setkey(y, "id")
haskey(x); haskey(y)
key(x); key(y)
x[y, nomatch = 0]
x[y]
y[x]
library(dplyr)
library(data.table)
data(starwars)
starwarsDT <- as.data.table(starwars)
starwarsDT[1]
starwarsDT[, .(min = min(mass, na.rm = T),
max = max(mass, na.rm = T),
nobs = .N), by = homeworld][nobs >1]
knitr::kable(head(iris[1:4,], n =3))
irisUnited <- irisDT[ , Sepal.Length.Width := paste0(Sepal.Length, "/", Sepal.Width)]
irisUnited[1:5]
irisSeparated = irisUnited[, c('Sepal.Length', 'Sepal.Width') := tstrsplit(Sepal.Length.Width, "/")]
irisSeparated[1:5]
data("relig_income")
a = as.data.table(relig_income)
a[1:5]
b = melt(a, id.vars = "religion", variable.name = "income_category", value.name = "n")
data("storms")
aa = as.data.table(storms)
aa[, date:= paste0(year, "-", month,"-", day)]
cols = sapply(irisDT, is.numeric)
cols = names(cols)[cols]
irisDT[, lapply(.SD, mean), by = Species, .SDcols = cols]
irisDT[, lapply(.SD, mean), by = Species, .SDcols = c("Petal.Length", "Petal.Width")]
irisDT[ , unlist(recursive = FALSE, lapply(.(mean = mean, sd = sd, min = min, max = max),
function(f) lapply(.SD, f))), by = Species][1:5]
data("starwars")
starwarsDT = as.data.table(starwars)
cols = sapply(starwarsDT, is.numeric)
cols = names(cols)[cols]
starwarsDT[, height:= as.numeric(height)]
starwarsDT[, unlist(recursive = F,
lapply(.(min = min, max = max, median = median, mean = mean), function(f) lapply(.SD, f))), by = .(homeworld, species), .SDcols = cols][1:5]
starwarsDT = as.data.table(starwars)
setnames(starwarsDT, toupper(names(starwarsDT)))
cols = sapply(starwarsDT, is.character)
cols = names(cols)[cols]
starwarsDT[, lapply(.SD, toupper)][1:5]
stormsDT <- as.data.table(storms)
numericCols = sapply(stormsDT, is.numeric)
numericCols = names(numericCols)[numericCols]
stormsDTNew <- na.omit(stormsDT, cols = numericCols)
characterCols <- sapply(stormsDTNew, is.character)
characterCols <- names(characterCols)[characterCols]
colsOfInterest <- c("ts_diameter", "hu_diameter")
stormsDTNew[, lapply(.SD, mean), .SDcols = colsOfInterest, by = characterCols][1:5]
# irisDT[, .SD[1L]]
# irisDT[, .SD[1L], by = Species]
irisDT[, .SD[1L], by = Species, .SDcols = c("Petal.Length", "Petal.Width")]
irisDT[order(-Sepal.Length), .SD[1:2]]
irisDT[, .SD[which.max(Sepal.Length)], by = Species, .SDcols = c("Sepal.Length","Sepal.Width")]
irisDT[, text := {
if(Sepal.Length > 4 & Sepal.Width > 4) "sepal length and width is larger than 4"
else if(Petal.Length < 2 & Petal.Width < 2) "petal length and width is smaller than 2"
else "other"
}, by = .(Species, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)][, .SD[1], by = text][1:5]
bin_iris <- function(sl, sw, pl, pw){
if(sl > 4 & sw > 4) "sepal length and width is larger than 4"
else if(pl < 2 & pw < 2) "petal length and width is smaller than 2"
else "other"
}
irisDT[, text := bin_iris(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
by = .(Species, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)][, .SD[1], by = text][1:5]
starwarsDT <- as.data.table(starwars)
starwarsDT[, if(.N >= 5) .SD[5L], by = species]
stormsDT <- as.data.table(storms)
stormsDT[, .(name, status, pressure)][order(name, pressure)][, .SD[1:min(5, .N)], by = name][1:5]
ipk = function(pkg){
new.pkg = list.of.pkgs[!(list.of.pkgs %in% .packages(all.available = TRUE))]
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
suppressPackageStartupMessages(sapply(pkg, library, character.only = TRUE))
}
list.of.pkgs = c('tidyverse', 'magrittr', 'nycflights13', 'lubridate')
ipk(list.of.pkgs)
x = read.csv("https://adventofcode.com/2020/day/1/input")
x = read.delim("https://adventofcode.com/2020/day/1/input")
Sys.info()["sysname"]
home = ifelse(Sys.info()["sysname"] == Linux, Sys.getenv("HOME"), Sys.getenv("USERPROFILE"))
home = ifelse(Sys.info()["sysname"] == 'Linux', Sys.getenv("HOME"), Sys.getenv("USERPROFILE"))
home = ifelse(Sys.info()["sysname"] == 'Linux', Sys.getenv("HOME"), Sys.getenv("USERPROFILE")) %>%
gsub("\\\\", "/".,)
home = ifelse(Sys.info()["sysname"] == 'Linux', Sys.getenv("HOME"), Sys.getenv("USERPROFILE")) %>%
gsub("\\\\", "/",.)
data = file.path(home, "Downloads")
dat = read.delim(dat1)
dat = read.delim(file.path(data,"dat1"))
dat = read.delim(file.path(data,"dat1.txt"))
dat = read.delim(file.path(data,"dat1.txt")) %>% `colnames<-`(c("x1"))
View(dat)
dat =  dat %>%
mutate(., x2 = x1)
out = expand.grid(dat$x1, dat$x2)
names(out)
out = expand.grid(dat$x1, dat$x2) %>% `colnames<-`(c("x1", "x2"))
out %>%
mutate(., x3 = sum(x1, x2)) %>%
filter(., x3 == 2020)
View(out)
out1 = out %>%
mutate(., x3 = sum(x1, x2))
View(out1)
out1 = out %>%
mutate(., x3 = sum(x1, x2)) %>%
filter(., x3 == 2020)
View(out1)
min(out$x1)
?dplyr::across
rowSums(1,3)
rowSums(c(1:2, 1:2))
out %>%
mutate(., x3 = rowSums(x1, x2))
ut %>%
mutate(., x3 = rowsum(x1, x2))
out %>%
mutate(., x3 = rowsum(x1, x2))
out %>%
mutate(., x3 = rowSums("x1", "x2"))
View(out)
out %>%
mutate(., x3 = rowSums(.))
out1 = out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020)
View(out1)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
prod(x1,x3)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
prod(x1,x3)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
prod("x1","x3")
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
(x1*x2)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
select(-x3)
out %>%
mutate(., x3 = rowSums(.)) %>%
filter(., x3 == 2020) %>% slice(1) %>%
select(-x3) %>%
prod(.)
source('~/.active-rstudio-document', echo=TRUE)
